#!/bin/zsh -f

# ZVault - Simple file vault written in Zsh.
# Homepage: <https://github.com/hernancerm/zvault>.

if [[ "${1}" != 'store' ]] && [[ "${1}" != 'install' ]] \
    && [[ "${1}" != 'encrypt' ]] && [[ "${1}" != 'decrypt' ]]; then
  echo 'Unrecognized sub-command' 1>&2
  exit 1
fi

if [[ -z "${PASSPHRASE}" ]]; then
  printf 'Passphrase: '; read -s -r PASSPHRASE; echo
  if [[ "${1}" = 'store' ]]; then
    printf 'Passphrase (repeat): '; read -s -r passphrase_verification; echo
    if [ "${passphrase_verification}" != "${PASSPHRASE}" ]; then
      echo 'Passphrases do not match. Aborting' >&2
      exit 1
    fi
  fi
fi

## @param $1 Path of plaintext file.
## @param $2 Target directory. Use dot (.) for current.
function encrypt {
  local name_of_encrypted_file="$(basename ${1}).enc"
  echo "${PASSPHRASE}" | gpg --batch --yes --passphrase-fd 0 \
    --output "${name_of_encrypted_file}" --symmetric --cipher-algo AES256 "${1}" 1>/dev/null
  local gpg_exit_status=${pipestatus[2]}
  if [[ ${gpg_exit_status} -ne 0 ]]; then
    return ${gpg_exit_status}
  fi
  mv "${name_of_encrypted_file}" "${2}/" 1>/dev/null
  local mv_exit_status=${?}
  # Exit code 2 means moving to its same location.
  if [[ ${mv_exit_status} -eq 0 ]] || [[ ${mv_exit_status} -eq 2 ]]; then
    echo "ENCRYPTED: ${1} -> ${2}/${name_of_encrypted_file}"
  fi
}

## @param $1 Path of encrypted file.
## @param $2 Target directory. Use dot (.) for current.
function decrypt {
  local name_of_plaintext_file="$(basename -s .enc ${1})"
  echo "${PASSPHRASE}" | gpg --batch --yes --passphrase-fd 0 \
    --output "${name_of_plaintext_file}" --decrypt "${1}" 1>/dev/null
  local gpg_exit_status=${pipestatus[2]}
  if [[ ${gpg_exit_status} -ne 0 ]]; then
    return ${gpg_exit_status}
  fi
  mv "${name_of_plaintext_file}" "${2}/" 1>/dev/null
  local mv_exit_status=${?}
  # Exit code 2 means moving to its same location.
  if [[ ${mv_exit_status} -eq 0 ]] || [[ ${mv_exit_status} -eq 2 ]]; then
    echo "DECRYPTED: ${1} -> ${2}/${name_of_plaintext_file}"
  fi
}

## @param $1 Line from config file.
function infer_globals_from_config_line {
  permissions="${${(s: :)1}[3]}"
  full_dir_of_installation="${${${(s: :)1}[2]}/'~'/${HOME}}"
  full_path_of_encrypted_file="${${${(s: :)1}[1]}/'~'/${HOME}}"
  name_of_plaintext_file="$(basename -s .enc "${full_path_of_encrypted_file}")"
  full_dir_of_encrypted_file="${$(dirname "${full_path_of_encrypted_file}")/'~'/${HOME}}"
  full_path_of_plaintext_file="${full_dir_of_installation}/${name_of_plaintext_file}"
}

if [[ "${1}" = 'store' ]]; then
  typeset -i exit_code=0
  while IFS='\n' read -r line; do
    infer_globals_from_config_line "${line}"
    if ! [[ -f "${full_path_of_plaintext_file}" ]]; then
      echo "Error: No such file: '${full_path_of_plaintext_file}'" 1>&2
      exit_code=1
    elif ! [[ -f "${full_path_of_encrypted_file}" ]]; then
      encrypt "${full_path_of_plaintext_file}" "${full_dir_of_encrypted_file}"
      chmod "${permissions}" "${full_path_of_encrypted_file}"
    fi
  done <<< "$(cat "${2}")"
  exit ${exit_code}
fi

if [[ "${1}" = 'install' ]]; then
  typeset -i exit_code=0
  while IFS='\n' read -r line; do
    infer_globals_from_config_line "${line}"
    if ! [[ -f "${full_path_of_encrypted_file}" ]]; then
      echo "Error: No such file: '${full_path_of_encrypted_file}'" 1>&2
      exit_code=1
    elif ! [[ -f "${full_path_of_plaintext_file}" ]]; then
      mkdir -p "${full_dir_of_installation}"
      decrypt "${full_path_of_encrypted_file}" "${full_dir_of_installation}"
      chmod "${permissions}" "${full_path_of_plaintext_file}"
    fi
  done <<< "$(cat "${2}")"
  exit ${exit_code}
fi

if [[ "${1}" = 'encrypt' ]]; then
  encrypt "${2}" "${3}"
elif [[ "${1}" = 'decrypt' ]]; then
  decrypt "${2}" "${3}"
fi
